plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

apply plugin: 'com.google.gms.google-services'

// Function to load properties without using `Properties` class
def getLocalProperty(key) {
    def propertiesFile = rootProject.file("local.properties")
    if (!propertiesFile.exists()) return ""

    def properties = [:]
    propertiesFile.eachLine { line ->
        def (propertyKey, propertyValue) = line.tokenize('=')
        if (propertyKey && propertyValue) {
            properties[propertyKey.trim()] = propertyValue.trim()
        }
    }

    return properties[key] ?: ""
}

// Retrieve API key
def apiKey = getLocalProperty("API_KEY")


android {
    namespace = "com.gdg.example.uniguard"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = 17
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.gdg.uniguard"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = 23
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName

        manifestPlaceholders["API_KEY"] = apiKey
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}
